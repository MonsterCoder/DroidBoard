package Codemeditation.DroidBoard;

import java.util.ArrayList;
import java.util.List;

import roboguice.activity.RoboActivity;
import Codemeditation.AgilezenApi.IKanbanApi;
import Codemeditation.Domain.Phase;
import Codemeditation.Domain.Story;
import android.app.ProgressDialog;
import android.content.Intent;
import android.graphics.Color;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.LinearLayout.LayoutParams;

import com.github.ysamlan.horizontalpager.HorizontalPager;
import com.google.inject.Inject;

public class PhasesListActivity extends RoboActivity {
	@Inject IKanbanApi kanbanApi;
	private String projectName;
	private int projectId;
	private List<Phase> phases;
	private Handler handler;
	private Runnable runnable;
	private List<ListView> storyListViews;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.phases_list_view);
		
		Intent intent = getIntent();
		Bundle bundle = intent.getExtras();
		projectId = bundle.getInt("PROJECT_ID");
		projectName = bundle.getString("PROJECT_NAME");
		
		final HorizontalPager.OnScreenSwitchListener onScreenSwitchListener =
	            new HorizontalPager.OnScreenSwitchListener() {
	                @Override
	                public void onScreenSwitched(final int screen) {
	                	ListView currentView = storyListViews.get(screen);
	                	Story[] stories_array = kanbanApi.GetStories(projectId, phases.get(screen).id).toArray(new Story[0]);
						StoryAdapter adapter = new StoryAdapter(stories_array);
						currentView.setAdapter(adapter);
	                }
	            };
		
		 // Create the view switcher
        final HorizontalPager realViewSwitcher = new HorizontalPager(getApplicationContext());
        storyListViews= new ArrayList<ListView>();
        
        realViewSwitcher.setOnScreenSwitchListener(onScreenSwitchListener);

		handler = new Handler();
		
		runnable = new Runnable() {

		@Override
		public void run() {
			       for (int i = 0; i < phases.size(); i++) {
			    	   	LinearLayout layout = new LinearLayout(PhasesListActivity.this);
			            TextView textView = new TextView(getApplicationContext());
			            textView.setText(phases.get(i).name);
			            textView.setTextSize(20);
			            textView.setTextColor(Color.GREEN);

			            textView.setWidth(layout.getWidth()-2);
			            ListView storiesList = new ListView(PhasesListActivity.this);
				
			            storyListViews.add(i, storiesList);
			            
			            layout.addView(textView);
			            layout.addView(storiesList);
			            realViewSwitcher.addView(layout);
			        }

			        // set as content view
			        setContentView(realViewSwitcher);
			}	
		};
		
		LoadPhasesctsTask async = new LoadPhasesctsTask();
		async.execute(null);	
	}
	
    private class StoryAdapter extends ArrayAdapter<Story> {
    	
		private Story[] stories;

		public StoryAdapter(Story[] stories) {
			super(PhasesListActivity.this, R.layout.story_item, R.id.name, stories);
			this.stories = stories;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			LayoutInflater inflater = getLayoutInflater();
			View item_row = inflater.inflate(R.layout.story_item, parent, false);
			
			TextView name = (TextView)item_row.findViewById(R.id.title);
			name.setText(String.format("%d", stories[position].id));
			
			TextView text = (TextView)item_row.findViewById(R.id.text);
			text.setText(stories[position].text );
			return item_row;
		}
    }

    private class LoadPhasesctsTask extends AsyncTask<Void, Void, Void>{
    	private ProgressDialog dialog;

		@Override
    	protected void onPreExecute() {
    		dialog = ProgressDialog.show(PhasesListActivity.this, "", "Loading phases ...", true);
    	}
		
		@Override
		protected Void doInBackground(Void... params) {
			phases = kanbanApi.GetPhases(projectId);
    		return null;
		}
    	
		@Override
		protected void onPostExecute(Void result) {
			if (dialog != null) dialog.dismiss();
			handler.post(runnable);
			super.onPostExecute(result);
		}

    }
}
