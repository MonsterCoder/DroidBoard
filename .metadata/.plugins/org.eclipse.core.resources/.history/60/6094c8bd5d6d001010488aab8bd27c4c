package Codemeditation.DroidBoard;

import java.util.List;

import roboguice.activity.RoboActivity;
import Codemeditation.AgilezenApi.IKanbanApi;
import Codemeditation.Domain.Phase;
import android.app.ProgressDialog;
import android.content.Intent;
import android.graphics.Color;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.Gravity;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;

import com.github.ysamlan.horizontalpager.HorizontalPager;
import com.google.inject.Inject;

public class PhasesListActivity extends RoboActivity {
	@Inject IKanbanApi kanbanApi;
	private String projectName;
	private int projectId;
	private List<Phase> phases;
	private Handler handler;
	private Runnable runnable;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.phases_list_view);
		
		Intent intent = getIntent();
		Bundle bundle = intent.getExtras();
		projectId = bundle.getInt("PROJECT_ID");
		projectName = bundle.getString("PROJECT_NAME");
		
		final HorizontalPager.OnScreenSwitchListener onScreenSwitchListener =
	            new HorizontalPager.OnScreenSwitchListener() {
	                @Override
	                public void onScreenSwitched(final int screen) {
	                    /*
	                     * this method is executed if a screen has been activated, i.e. the screen is
	                     * completely visible and the animation has stopped (might be useful for
	                     * removing / adding new views)
	                     */
	                    Log.d("HorizontalPager", "switched to screen: " + screen);
	                }
	            };

		
		 // Create the view switcher
        final HorizontalPager realViewSwitcher = new HorizontalPager(getApplicationContext());
        
        realViewSwitcher.setOnScreenSwitchListener(onScreenSwitchListener);

		handler = new Handler();
		
		runnable = new Runnable() {

			@Override
			public void run() {

			       for (int i = 0; i < phases.size(); i++) {
			    	   	LinearLayout layout = new LinearLayout(PhasesListActivity.this);
			            TextView textView = new TextView(getApplicationContext());
			            textView.setText(phases.get(i).name);
			            textView.setTextSize(20);
			            textView.setTextColor(Color.WHITE);
			            textView.setGravity(Gravity.TOP);
			            ListView storiesList = new ListView(PhasesListActivity.this);
			            
			            layout.addView(textView);
			            layout.addView(storiesList);
			            realViewSwitcher.addView(layout);
			        }

			        // set as content view
			        setContentView(realViewSwitcher);
			}
			
			   private final HorizontalPager.OnScreenSwitchListener onScreenSwitchListener =
		            new HorizontalPager.OnScreenSwitchListener() {
		                @Override
		                public void onScreenSwitched(final int screen) {
		                    /*
		                     * this method is executed if a screen has been activated, i.e. the screen is
		                     * completely visible and the animation has stopped (might be useful for
		                     * removing / adding new views)
		                     */
		                    Log.d("HorizontalPager", "switched to screen: " + screen);
		                }
		            };

			
		};
		
		
		
		LoadPhasesctsTask async = new LoadPhasesctsTask();
		async.execute(null);	
		
	}
	


    private class LoadPhasesctsTask extends AsyncTask<Void, Void, Void>{
    	private ProgressDialog dialog;

		@Override
    	protected void onPreExecute() {
    		dialog = ProgressDialog.show(PhasesListActivity.this, "", "Loading phases ...", true);
    	}
		
		@Override
		protected Void doInBackground(Void... params) {
			phases = kanbanApi.GetPhases(projectId);
    		return null;
		}
    	
		@Override
		protected void onPostExecute(Void result) {
			if (dialog != null) dialog.dismiss();
			handler.post(runnable);
			super.onPostExecute(result);
		}

    }
}
