/*
 * Copyright (C) 2010 Eric Harlow
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.ericharlow.DragNDrop;

import Codemeditation.DroidBoard.DroidBoardApplication;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.PixelFormat;
import android.util.AttributeSet;
import android.util.Log;
import android.view.GestureDetector;
import android.view.Gravity;
import android.view.MotionEvent;
import android.view.View;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.Toast;

public class DragNDropListView extends ListView {
	GestureDetector mGestureDetector;
	
	DropListener mDropListener;
	RemoveListener mRemoveListener;
	DragListener mDragListener;

	private Context context;

	private DragDropManager _dragdropManager;

	public DragNDropListView(final Context context, AttributeSet attrs) {
		super(context, attrs);
		_dragdropManager = ((DroidBoardApplication)context.getApplicationContext()).GetDragDropManager();
		
		setOnItemLongClickListener(new OnItemLongClickListener() {

			@Override
			public boolean onItemLongClick(AdapterView<?> arg0,
					View view, int arg2, long arg3) {
				_dragdropManager.SetDragMode(true);	
				Toast.makeText(getContext(), "long click", Toast.LENGTH_SHORT).show();
				return false;
			}			
		});
	}
	
	
	public void setDropListener(DropListener l) {
		mDropListener = l;
	}

	public void setRemoveListener(RemoveListener l) {
		mRemoveListener = l;
	}
	
	public void setDragListener(DragListener l) {
		mDragListener = l;
	}
	
	public void setContext(Context context) {
	 this.context = context;
	}


	@Override
	public boolean onTouchEvent(MotionEvent ev) {
		final int action = ev.getAction();
		final int x = (int) ev.getX();
		final int y = (int) ev.getY();	
		/// Toast.makeText(getContext(), "view tough event", Toast.LENGTH_SHORT).show();
		
		if (_dragdropManager.GetDragMode()) {
			
		
			if (_dragdropManager.getDragView() == null) {
				_dragdropManager.setStartPosition(pointToPosition(x,y));
				if (_dragdropManager.getStartPosition() != INVALID_POSITION) {
					int mItemPosition = _dragdropManager.getStartPosition() - getFirstVisiblePosition();
					_dragdropManager.setDragPointOffset_y(y - getChildAt(mItemPosition).getTop());
					_dragdropManager.setDragPointOffset_y(_dragdropManager.getDragPointOffset_y()
							- (((int)ev.getRawY()) - y));
					_dragdropManager.setDragPointOffset_x(x);
		           _dragdropManager.startDrag(getChildAt(mItemPosition),x, y, context);

				}	
			}
			
			switch (action) {
				case MotionEvent.ACTION_DOWN:
					Toast.makeText(getContext(), "listview down", Toast.LENGTH_SHORT).show();
					break;
				case MotionEvent.ACTION_MOVE:
				 _dragdropManager.drag(x,y, context);
					break;
				case MotionEvent.ACTION_CANCEL:	
				case MotionEvent.ACTION_UP:
				default:
					Toast.makeText(getContext(), "view drop", Toast.LENGTH_SHORT).show();
					_dragdropManager.SetDragMode(false);
					_dragdropManager.setEndPosition(pointToPosition(x,y));
					_dragdropManager.stopDrag(getChildAt(_dragdropManager.getStartPosition() - getFirstVisiblePosition()), context);
					if (mDropListener != null && _dragdropManager.getStartPosition() != INVALID_POSITION && _dragdropManager.getEndPosition() != INVALID_POSITION) {
		        		 mDropListener.onDrop(_dragdropManager.getStartPosition(), _dragdropManager.getEndPosition());
		        		 this.invalidateViews();
					}
					break;
			}
			
		} else {
			return super.onTouchEvent(ev);
		}
		
		return false;
	}	
}
